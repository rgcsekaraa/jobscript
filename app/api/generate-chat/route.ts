// app/api/generate-chat/route.ts
import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

export async function POST(request: NextRequest) {
  console.log('Received POST request to /api/generate-chat');
  try {
    // Get API key from headers or environment
    const apiKey =
      request.headers.get('X-OpenAI-Api-Key') || process.env.KEY_4_OPENAI;
    if (!apiKey) {
      console.error('No OpenAI API key provided');
      return NextResponse.json(
        { error: 'No OpenAI API key provided. Please set it in Settings.' },
        { status: 500 }
      );
    }

    const openai = new OpenAI({ apiKey });

    console.log('Parsing request body');
    const { prompt } = await request.json();
    console.log('Request body parsed', {
      hasPrompt: !!prompt,
      promptLength: prompt?.length,
    });

    if (!prompt || typeof prompt !== 'string' || !prompt.trim()) {
      console.log('Missing or invalid prompt');
      return NextResponse.json(
        { error: 'Please provide a valid prompt' },
        { status: 400 }
      );
    }

    console.log('Generating chat response with Open AI');
    try {
      const completion = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: 'You are a helpful assistant.' },
          { role: 'user', content: prompt },
        ],
        max_tokens: 500,
      });

      const content = completion.choices[0]?.message.content || '';
      console.log('Chat response generated', { contentLength: content.length });

      if (!content) {
        console.log('No content generated by Open AI');
        return NextResponse.json(
          { error: 'Failed to generate response: No content returned' },
          { status: 500 }
        );
      }

      console.log('Returning chat response');
      return NextResponse.json({ content });
    } catch (error) {
      console.error('Error generating chat response:', error);
      const errorMessage =
        error instanceof Error ? error.message : 'Failed to generate response';
      if (error instanceof Error && error.message.includes('401')) {
        console.error('Invalid OpenAI API key');
        return NextResponse.json(
          {
            error: 'Invalid OpenAI API key. Please check your key in Settings.',
          },
          { status: 401 }
        );
      }
      return NextResponse.json({ error: errorMessage }, { status: 500 });
    }
  } catch (error) {
    console.error('Error processing request:', error);
    return NextResponse.json(
      {
        error:
          error instanceof Error ? error.message : 'Failed to process request',
      },
      { status: 500 }
    );
  }
}
