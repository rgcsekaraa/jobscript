// app/api/generate-mail/route.ts
import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.KEY_4_OPENAI,
});

export async function POST(request: NextRequest) {
  console.log('Received POST request to /api/generate-mail');
  try {
    // Validate Open AI API key
    if (!process.env.KEY_4_OPENAI) {
      console.error('Missing Open AI API key');
      return NextResponse.json(
        { error: 'Server configuration error: Missing Open AI API key' },
        { status: 500 }
      );
    }

    // Parse JSON body
    console.log('Parsing request body');
    const { jobDescription } = await request.json();
    console.log('Request body parsed', {
      hasJobDescription: !!jobDescription,
      jobDescriptionLength: jobDescription?.length,
    });

    if (
      !jobDescription ||
      typeof jobDescription !== 'string' ||
      !jobDescription.trim()
    ) {
      console.log('Missing or invalid job description');
      return NextResponse.json(
        { error: 'Please provide a valid job description' },
        { status: 400 }
      );
    }

    // Generate email with Open AI
    console.log('Generating email with Open AI');
    try {
      const prompt = `
        You are a professional email writer. Generate a professional email for a job application based on the provided job description. The email must:
        - Include only skills, qualifications, and details relevant to the job description.
        - Be concise, professional, and formatted as plain text.
        - Use a formal tone suitable for a job application.
        - Include standard email components (e.g., subject line, greeting, body, closing).
        
        Job Description:
        ${jobDescription}
        
        Output the email in plain text, starting with the subject line:
      `;

      const completion = await openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          { role: 'system', content: 'You are a professional email writer.' },
          { role: 'user', content: prompt },
        ],
        max_tokens: 500,
      });

      const content = completion.choices[0]?.message.content || '';
      console.log('Email generated', { contentLength: content.length });

      if (!content) {
        console.log('No content generated by Open AI');
        return NextResponse.json(
          { error: 'Failed to generate email: No content returned' },
          { status: 500 }
        );
      }

      console.log('Returning generated email');
      return NextResponse.json({ content });
    } catch (error) {
      console.error('Error generating email:', error);
      return NextResponse.json(
        {
          error:
            error instanceof Error ? error.message : 'Failed to generate email',
        },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('Error processing request:', error);
    return NextResponse.json(
      {
        error:
          error instanceof Error ? error.message : 'Failed to process request',
      },
      { status: 500 }
    );
  }
}
